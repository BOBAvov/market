version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: mp_db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwerty
    ports:
      - "5436:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      # Инициализируем схему при первом старте
      - ./migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-marketplace} -h localhost"]
      interval: 3s
      timeout: 5s
      retries: 20
    # Немного тюнинга для dev (на проде подбирай под ресурсы)
    command:
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "wal_compression=on"
      # Внимание: sync_commit=off ускоряет, но риск потери последних транзакций при сбое
      # - "-c"
      # - "synchronous_commit=off"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    restart: unless-stopped
    networks:
      - mp_net

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mp_api
    environment:
      # server
      SERVER_ADDR: ":8080"
      SERVER_PREFORK: "true"
      SERVER_READTIMEOUT: "5s"
      SERVER_WRITETIMEOUT: "10s"

      # db
      DB_DSN: "postgres://postgres:qwerty@localhost:5436/postgres?sslmode=disable"
      DB_MAXCONNS: "30"
      DB_MINCONNS: "5"
      DB_MAXCONNLIFETIME: "1h"
      DB_MAXCONNIDLETIME: "10m"

      # auth
      AUTH_JWTSECRET: ${AUTH_JWTSECRET:-supersecret_change_me}
      AUTH_ACCESSTTL: "1d"

      # logger
      LOGGER_LEVEL: "info"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - mp_net

volumes:
  db_data:

networks:
  mp_net: